'use client';

import { Page } from '@/components/Page';
import Link from 'next/link';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { 
  Search, 
  Home as HomeIcon,
  Calendar,
  User,
  Star,
  MessageSquare,
  FileText,
  Lock,
  LockOpen,
  X
} from 'lucide-react';
import { SearchModal } from '@/components/SearchModal';
import { searchService } from '@/services/searchService';
import { initData, useSignal } from '@telegram-apps/sdk-react';
import { User as DbUser } from '@/types/database';
import { checkDeepLink, getStartParam } from '@/lib/deepLinks';

import styles from './page.module.css';

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–∞–π–ª–∞–π—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const highlights = [
  { id: 1, image: '/images/starthere.webp', route: '/start-here' },
  { id: 2, image: '/images/about.webp', route: '/about' },
  { id: 3, image: '/images/review.webp', route: '/reviews' },
  { id: 4, image: '/images/faq.webp', route: '/faq' },
];

// –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const courses = [
  { 
    id: 'intro-training', 
    image: '/images/ploskii.webp',
    type: 'full-width',
    route: '/courses/intro-training'
  },
  { 
    id: 'flat-belly', 
    image: '/images/jivot.webp',
    type: 'square',
    route: '/courses/flat-belly'
  },
  { 
    id: 'anti-swelling', 
    image: '/images/oteki.webp',
    type: 'square',
    route: '/courses/anti-swelling'
  },
  { 
    id: 'author', 
    image: '/images/autor.webp',
    type: 'tall',
    route: '/author'
  },
];

export default function Home() {
  const [currentDot, setCurrentDot] = useState(0);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [userData, setUserData] = useState<DbUser | null>(null);
  const [loadingUserData, setLoadingUserData] = useState(true);
  const [showSubscriptionModal, setShowSubscriptionModal] = useState(false);
  const [chatLink, setChatLink] = useState<string | null>(null);
  const router = useRouter();




  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const user = useSignal(initData.user);
  
  // 3 —Ç–æ—á–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const dotsCount = 3;

  // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getTelegramId = () => {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram WebApp API
    if (typeof window !== 'undefined') {
      const tg = (window as any).Telegram?.WebApp;
      if (tg?.initDataUnsafe?.user?.id) {
        return tg.initDataUnsafe.user.id.toString();
      }
    }
    
    // Fallback - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    return '123456789';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const loadUserData = async () => {
    setLoadingUserData(true);
    try {
      const telegramId = user?.id?.toString() || getTelegramId();
      
      const response = await fetch(`/api/users?telegramId=${telegramId}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
          setUserData(null);
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } else {
        const data: DbUser = await response.json();
        setUserData(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      setUserData(null);
    } finally {
      setLoadingUserData(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
  const isSubscriptionActive = userData?.status === '–ê–∫—Ç–∏–≤–Ω–∞';

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
  const handleChatClick = (e: React.MouseEvent) => {
    if (!isSubscriptionActive) {
      e.preventDefault();
      setShowSubscriptionModal(true);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Ñ–æ–Ω–µ
  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    searchService.buildIndex().catch(console.error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –Ω–∞ –æ—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get('error');
    
    if (error === 'no_subscription') {
      setShowSubscriptionModal(true);
    }

    // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º deep links (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é)
    const handleDeepLink = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ deep link —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      const deepLinkProcessed = sessionStorage.getItem('deepLinkProcessed');
      if (deepLinkProcessed) {
        console.log('üîÑ Deep link already processed in this session, skipping');
        return;
      }

      const startParam = getStartParam();
      const deepLinkResult = checkDeepLink(startParam);
      
      if (deepLinkResult.isDeepLink && deepLinkResult.type === 'materials' && deepLinkResult.materialId) {
        console.log('üöÄ Deep link navigation to material:', deepLinkResult.materialId);
        
        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ deep link –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        sessionStorage.setItem('deepLinkProcessed', 'true');
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
        setTimeout(() => {
          router.push(`/materials/${deepLinkResult.materialId}`);
        }, 800);
      }
    };

    handleDeepLink();
  }, [router]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
  const loadChatLink = async () => {
    if (isSubscriptionActive) {
      try {
        const telegramId = user?.id?.toString() || getTelegramId();
        const response = await fetch(`/api/secure-links?telegram_id=${telegramId}&type=chat`);
        
        if (response.ok) {
          const data = await response.json();
          setChatLink(data.link);
        }
      } catch (error) {
        console.error('Error loading chat link:', error);
        setChatLink(null);
      }
    } else {
      setChatLink(null);
    }
  };



  // –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (user?.id) {
      loadUserData();
    }
  }, [user?.id]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è
  useEffect(() => {
    loadChatLink();
  }, [isSubscriptionActive, user?.id]);
  
  const scrollToPosition = (dotIndex: number) => {
    setCurrentDot(dotIndex);
    const container = document.getElementById('highlights-container');
    if (container) {
      const scrollPercentage = dotIndex / (dotsCount - 1);
      const maxScroll = container.scrollWidth - container.clientWidth;
      const scrollAmount = maxScroll * scrollPercentage;
      container.scrollTo({ left: scrollAmount, behavior: 'smooth' });
    }
  };

  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const container = e.currentTarget;
    const scrollLeft = container.scrollLeft;
    const maxScroll = container.scrollWidth - container.clientWidth;
    const scrollPercentage = maxScroll > 0 ? scrollLeft / maxScroll : 0;
    const currentIndex = Math.round(scrollPercentage * (dotsCount - 1));
    setCurrentDot(currentIndex);
  };

  return (
    <Page back={false}>
      <div className={styles.container}>
        {/* –•–∞–π–ª–∞–π—Ç—ã */}
        <div className={styles.highlightsSection}>
          <div 
            id="highlights-container"
            className={styles.highlightsContainer}
            onScroll={handleScroll}
          >
            {highlights.map((highlight) => {
              return (
                <Link key={highlight.id} href={highlight.route} className={styles.highlightCard}>
                  <div className={styles.highlightContent}>
                    <Image
                      src={highlight.image}
                      alt=""
                      fill
                      className={styles.highlightImage}
                      sizes="120px"
                    />
                  </div>
                </Link>
              );
            })}
          </div>
          
          {/* –¢–æ—á–µ—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
          <div className={styles.highlightsDots}>
            {Array.from({ length: dotsCount }, (_, index) => (
              <button
                key={index}
                className={`${styles.dot} ${index === currentDot ? styles.activeDot : ''}`}
                onClick={() => scrollToPosition(index)}
              />
            ))}
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        <div className={styles.searchContainer}>
          <button 
            className={styles.searchBox}
            onClick={() => setIsSearchOpen(true)}
          >
            <Search className={styles.searchIcon} size={20} />
            <span className={styles.searchPlaceholder}>–ü–æ–∏—Å–∫...</span>
          </button>
        </div>

        {/* –ö—É—Ä—Å—ã */}
        <div className={styles.coursesSection}>
          {/* –í–≤–æ–¥–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ */}
          {courses.filter(course => course.type === 'full-width').map((course) => {
            return (
              <Link key={course.id} href={course.route} className={styles.courseCardFullWidth}>
                <div className={styles.courseContent}>
                  <Image
                    src={course.image}
                    alt=""
                    fill
                    className={styles.courseImage}
                    sizes="(max-width: 768px) 100vw, 600px"
                  />
                </div>
              </Link>
            );
          })}
          
          {/* –°–µ—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ */}
          <div className={styles.coursesGrid}>
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –¥–≤–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–∞ */}
            <div className={styles.leftColumn}>
              {courses.filter(course => course.type === 'square').map((course) => {
                return (
                  <Link key={course.id} href={course.route} className={styles.courseCardSquare}>
                    <div className={styles.courseContent}>
                      <Image
                        src={course.image}
                        alt=""
                        fill
                        className={styles.courseImage}
                        sizes="(max-width: 768px) 50vw, 200px"
                      />
                    </div>
                  </Link>
                );
              })}
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∞–≤—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã */}
            <div className={styles.rightColumn}>
              {courses.filter(course => course.type === 'tall').map((course) => {
                return (
                  <Link key={course.id} href={course.route} className={styles.courseCardTall}>
                    <div className={styles.courseContent}>
                      <Image
                        src={course.image}
                        alt=""
                        fill
                        className={styles.courseImage}
                        sizes="(max-width: 768px) 50vw, 200px"
                      />
                    </div>
                  </Link>
                );
              })}
            </div>
          </div>
        </div>

        {/* –ß–∞—Ç –∫–ª—É–±–∞ */}
        <div className={styles.clubChatSection}>
          <a 
            href={isSubscriptionActive && chatLink ? chatLink : "#"}
            target={isSubscriptionActive && chatLink ? "_blank" : "_self"}
            rel={isSubscriptionActive && chatLink ? "noopener noreferrer" : ""}
            className={styles.clubChatCard}
            onClick={handleChatClick}
          >
            <div className={styles.clubChatContent}>
              <Image
                src="/images/chat.webp"
                alt=""
                fill
                className={styles.clubChatImage}
                sizes="(max-width: 768px) 100vw, 600px"
              />
              {/* –ü—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —Å—Ç–µ–∫–ª–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ */}
              {!isSubscriptionActive && (
                <div className={styles.chatGlassOverlay}>
                  {/* –ó–∞–º–æ–∫ –ø–æ–≤–µ—Ä—Ö —Å—Ç–µ–∫–ª–∞ */}
                  <div className={styles.chatLockContainer}>
                    <div className={`${styles.chatLockIcon} ${styles.pulsingLock}`}>
                      <Lock size={24} />
                    </div>
                  </div>
                </div>
              )}
            </div>
          </a>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫–æ–≤–∞—è –º–æ–¥–∞–ª–∫–∞ */}
      <SearchModal 
        isOpen={isSearchOpen} 
        onClose={() => setIsSearchOpen(false)} 
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ */}
      {showSubscriptionModal && (
        <div className={styles.modalOverlay} onClick={() => setShowSubscriptionModal(false)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <button 
              className={styles.closeButton}
              onClick={() => setShowSubscriptionModal(false)}
            >
              <X size={24} />
            </button>
            
            <div className={styles.modalBody}>
              <div className={styles.modalIcon}>
                <Lock size={48} />
              </div>
              
              <h3 className={styles.modalTitle}>–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –∫–ª—É–±–∞</h3>
              
              <p className={styles.modalText}>
                –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∫–ª—É–±–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. 
                –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤—å—é!
              </p>
              
              <a 
                href="https://t.me/Ploskiy_zhivot_s_Ayunoy_bot?start=start"
                target="_blank"
                rel="noopener noreferrer"
                className={styles.modalButton}
              >
                –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü
              </a>
            </div>
          </div>
        </div>
      )}


    </Page>
  );
}
