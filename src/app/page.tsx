'use client';

import { Page } from '@/components/Page';
import Link from 'next/link';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { 
  Search, 
  Home as HomeIcon,
  Calendar,
  User,
  Star,
  MessageSquare,
  FileText,
  Lock,
  LockOpen,
  X
} from 'lucide-react';
import { SearchModal } from '@/components/SearchModal';
import { searchService } from '@/services/searchService';
import { initData, useSignal } from '@telegram-apps/sdk-react';
import { User as DbUser } from '@/types/database';
import { checkDeepLink, getStartParam, parseUtmFromStartParam } from '@/lib/deepLinks';

import styles from './page.module.css';

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–∞–π–ª–∞–π—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const highlights = [
  { id: 1, image: '/images/starthere.webp', route: '/start-here' },
  { id: 2, image: '/images/about.webp', route: '/about' },
  { id: 3, image: '/images/zabota.webp', route: 'https://t.me/istochnik_clubbot?start=zabota' },
  { id: 4, image: '/images/faq.webp', route: '/faq' },
  { id: 5, image: '/images/review.webp', route: '/reviews' },
];

// –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const courses = [
  { 
    id: 'mini-courses', 
    image: '/images/materials.webp',
    type: 'full-width',
    route: '/courses/mini-courses'
  },
  { 
    id: 'questions', 
    image: '/images/questions.webp',
    type: 'square',
    route: '/courses/questions'
  },
  { 
    id: 'speeches', 
    image: '/images/speeches.webp',
    type: 'square',
    route: '/courses/speeches'
  },
  { 
    id: 'dialogs', 
    image: '/images/dialogs.webp',
    type: 'square',
    route: '/courses/dialogs'
  },
  { 
    id: 'opinion', 
    image: '/images/opinion.webp',
    type: 'square',
    route: '/courses/opinion'
  },
];

export default function Home() {
  const [currentDot, setCurrentDot] = useState(0);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [userData, setUserData] = useState<DbUser | null>(null);
  const [showSubscriptionModal, setShowSubscriptionModal] = useState(false);
  const [chatLink, setChatLink] = useState<string | null>(null);
  const [channelLink, setChannelLink] = useState<string | null>(null);
  const router = useRouter();




  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const user = useSignal(initData.user);
  
  // 3 —Ç–æ—á–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (4 —Ö–∞–π–ª–∞–π—Ç–∞)
  const dotsCount = 3;

  // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getTelegramId = () => {
    console.log('üîç Getting Telegram ID...');
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram WebApp API
    if (typeof window !== 'undefined') {
      const tg = (window as any).Telegram?.WebApp;
      console.log('üì± Telegram WebApp object:', tg);
      console.log('üìã initDataUnsafe:', tg?.initDataUnsafe);
      
      if (tg?.initDataUnsafe?.user?.id) {
        const telegramId = tg.initDataUnsafe.user.id.toString();
        console.log('‚úÖ Got Telegram ID from WebApp:', telegramId);
        return telegramId;
      }
    }
    
    // Fallback - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log('‚ö†Ô∏è Using fallback Telegram ID: 123456789');
    return '123456789';
  };

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏  
  const autoRegisterUser = async (telegramId: string, startParam: string | null) => {
    try {
      console.log('üîÑ FRONTEND AUTO-REGISTER VERSION: 2024-08-29-v2 üîÑ');
      console.log('üîÑ Auto-registering user:', telegramId, 'startParam:', startParam);
      
      const utmParams = parseUtmFromStartParam(startParam);
      
      const registrationData = {
        telegram_id: telegramId,
        name_from_ml: user?.first_name || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: user?.username || null,
        start_param: startParam,
        ...utmParams
      };

      const response = await fetch('/api/users/auto-register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(registrationData)
      });

      const data = await response.json();
      
      if (data.success) {
        console.log('‚úÖ User auto-registered successfully:', data.user);
        return data.user;
      } else {
        console.error('‚ùå Auto-registration failed:', data.error);
        return null;
      }
    } catch (error) {
      console.error('‚ùå Error during auto-registration:', error);
      return null;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π)
  const loadUserData = async () => {
    try {
      console.log('üîÑ Starting loadUserData...');
      console.log('üë§ SDK user object:', user);
      
      const telegramId = user?.id?.toString() || getTelegramId();
      console.log('üÜî Using Telegram ID:', telegramId);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üîç Checking if user exists in database...');
      const response = await fetch(`/api/users?telegramId=${telegramId}`);
      console.log('üì° Response status:', response.status);
      
      if (response.ok) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
        const data: DbUser = await response.json();
        setUserData(data);
        console.log('üë§ Existing user loaded:', data.telegram_id);
        return;
      }
      
      if (response.status === 404) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        console.log('üÜï User not found, attempting auto-registration...');
        
        const startParam = getStartParam();
        console.log('üìù Start param for registration:', startParam);
        
        const newUser = await autoRegisterUser(telegramId, startParam);
        
        if (newUser) {
          console.log('‚úÖ Auto-registration successful!', newUser);
          setUserData(newUser);
        } else {
          console.log('‚ùå Auto-registration failed');
          setUserData(null);
        }
      } else {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error('‚ùå Error in loadUserData:', error);
      setUserData(null);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
  const isSubscriptionActive = userData?.status === '–ê–∫—Ç–∏–≤–Ω–∞';

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
  const handleChatClick = (e: React.MouseEvent) => {
    if (!isSubscriptionActive) {
      e.preventDefault();
      setShowSubscriptionModal(true);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –±–ª–æ–∫–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤/–∫—É—Ä—Å–æ–≤
  const handleCourseClick = (e: React.MouseEvent, route: string) => {
    if (!isSubscriptionActive) {
      e.preventDefault();
      setShowSubscriptionModal(true);
    } else {
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
      e.preventDefault();
      router.push(route);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Ñ–æ–Ω–µ
  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    searchService.buildIndex().catch(console.error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –Ω–∞ –æ—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get('error');
    
    if (error === 'no_subscription') {
      setShowSubscriptionModal(true);
    }

    // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º deep links (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é)
    const handleDeepLink = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ deep link —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      const deepLinkProcessed = sessionStorage.getItem('deepLinkProcessed');
      if (deepLinkProcessed) {
        console.log('üîÑ Deep link already processed in this session, skipping');
        return;
      }

      const startParam = getStartParam();
      const deepLinkResult = checkDeepLink(startParam);
      
      if (deepLinkResult.isDeepLink && deepLinkResult.type === 'materials' && deepLinkResult.materialId) {
        console.log('üöÄ Deep link navigation to material:', deepLinkResult.materialId);
        
        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ deep link –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        sessionStorage.setItem('deepLinkProcessed', 'true');
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
        setTimeout(() => {
          router.push(`/materials/${deepLinkResult.materialId}`);
        }, 800);
      }
    };

    handleDeepLink();
  }, [router]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const loadLinks = async () => {
    if (isSubscriptionActive) {
      try {
        const response = await fetch('/api/env-links');
        
        if (response.ok) {
          const data = await response.json();
          setChatLink(data.chatLink);
          setChannelLink(data.channelLink);
        }
      } catch (error) {
        console.error('Error loading links:', error);
        setChatLink(null);
        setChannelLink(null);
      }
    } else {
      setChatLink(null);
      setChannelLink(null);
    }
  };



  // –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (user?.id) {
      loadUserData();
    }
  }, [user?.id]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è
  useEffect(() => {
    loadLinks();
  }, [isSubscriptionActive, user?.id]);
  
  const scrollToPosition = (dotIndex: number) => {
    setCurrentDot(dotIndex);
    const container = document.getElementById('highlights-container');
    if (container) {
      const scrollPercentage = dotIndex / (dotsCount - 1);
      const maxScroll = container.scrollWidth - container.clientWidth;
      const scrollAmount = maxScroll * scrollPercentage;
      container.scrollTo({ left: scrollAmount, behavior: 'smooth' });
    }
  };

  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const container = e.currentTarget;
    const scrollLeft = container.scrollLeft;
    const maxScroll = container.scrollWidth - container.clientWidth;
    const scrollPercentage = maxScroll > 0 ? scrollLeft / maxScroll : 0;
    const currentIndex = Math.round(scrollPercentage * (dotsCount - 1));
    setCurrentDot(currentIndex);
  };

  return (
    <Page back={false}>
      <div className={styles.container}>
        {/* –•–∞–π–ª–∞–π—Ç—ã */}
        <div className={styles.highlightsSection}>
          <div 
            id="highlights-container"
            className={styles.highlightsContainer}
            onScroll={handleScroll}
          >
            {highlights.map((highlight) => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤–Ω–µ—à–Ω–µ–π
              const isExternalLink = highlight.route.startsWith('http');
              
              if (isExternalLink) {
                return (
                  <a 
                    key={highlight.id} 
                    href={highlight.route} 
                    className={styles.highlightCard}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    <div className={styles.highlightContent}>
                      <Image
                        src={highlight.image}
                        alt=""
                        fill
                        className={styles.highlightImage}
                        sizes="120px"
                      />
                    </div>
                  </a>
                );
              }

              return (
                <Link key={highlight.id} href={highlight.route} className={styles.highlightCard}>
                  <div className={styles.highlightContent}>
                    <Image
                      src={highlight.image}
                      alt=""
                      fill
                      className={styles.highlightImage}
                      sizes="120px"
                    />
                  </div>
                </Link>
              );
            })}
          </div>
          
          {/* –¢–æ—á–µ—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
          <div className={styles.highlightsDots}>
            {Array.from({ length: dotsCount }, (_, index) => (
              <button
                key={index}
                className={`${styles.dot} ${index === currentDot ? styles.activeDot : ''}`}
                onClick={() => scrollToPosition(index)}
              />
            ))}
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        <div className={styles.searchContainer}>
          <button 
            className={styles.searchBox}
            onClick={() => setIsSearchOpen(true)}
          >
            <Search className={styles.searchIcon} size={20} />
            <span className={styles.searchPlaceholder}>–ü–æ–∏—Å–∫...</span>
          </button>
        </div>

        {/* –ö—É—Ä—Å—ã */}
        <div className={styles.coursesSection}>
          {/* –í–≤–æ–¥–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ */}
          {courses.filter(course => course.type === 'full-width').map((course) => {
            return (
              <a 
                key={course.id} 
                href="#"
                className={styles.courseCardFullWidth}
                onClick={(e) => handleCourseClick(e, course.route)}
              >
                <div className={styles.courseContent}>
                  <Image
                    src={course.image}
                    alt=""
                    fill
                    className={styles.courseImage}
                    sizes="(max-width: 768px) 100vw, 600px"
                  />
                  {/* –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ */}
                  {!isSubscriptionActive && (
                    <div className={styles.courseGlassOverlay}>
                      <div className={styles.courseLockContainer}>
                        <div className={`${styles.courseLockIcon} ${styles.pulsingLock}`}>
                          <Lock size={24} />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </a>
            );
          })}
          
          {/* –°–µ—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ - —Ç–µ–ø–µ—Ä—å 2x2 */}
          <div className={styles.coursesGrid}>
            {courses.filter(course => course.type === 'square').map((course) => {
              return (
                <a 
                  key={course.id} 
                  href="#"
                  className={styles.courseCardSquare}
                  onClick={(e) => handleCourseClick(e, course.route)}
                >
                  <div className={styles.courseContent}>
                    <Image
                      src={course.image}
                      alt=""
                      fill
                      className={styles.courseImage}
                      sizes="(max-width: 768px) 50vw, 200px"
                    />
                    {/* –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ */}
                    {!isSubscriptionActive && (
                      <div className={styles.courseGlassOverlay}>
                        <div className={styles.courseLockContainer}>
                          <div className={`${styles.courseLockIcon} ${styles.pulsingLock}`}>
                            <Lock size={20} />
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </a>
              );
            })}
          </div>
        </div>

        {/* –ß–∞—Ç –∫–ª—É–±–∞ */}
        <div className={styles.clubChatSection}>
          <a 
            href={isSubscriptionActive && chatLink ? chatLink : "#"}
            target={isSubscriptionActive && chatLink ? "_blank" : "_self"}
            rel={isSubscriptionActive && chatLink ? "noopener noreferrer" : ""}
            className={styles.clubChatCard}
            onClick={handleChatClick}
          >
            <div className={styles.clubChatContent}>
              <Image
                src="/images/chat.webp"
                alt=""
                fill
                className={styles.clubChatImage}
                sizes="(max-width: 768px) 100vw, 600px"
              />
              {/* –ü—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —Å—Ç–µ–∫–ª–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ */}
              {!isSubscriptionActive && (
                <div className={styles.chatGlassOverlay}>
                  {/* –ó–∞–º–æ–∫ –ø–æ–≤–µ—Ä—Ö —Å—Ç–µ–∫–ª–∞ */}
                  <div className={styles.chatLockContainer}>
                    <div className={`${styles.chatLockIcon} ${styles.pulsingLock}`}>
                      <Lock size={24} />
                    </div>
                  </div>
                </div>
              )}
            </div>
          </a>
        </div>

        {/* –ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ */}
        <div className={styles.clubChannelSection}>
          <a 
            href={isSubscriptionActive && channelLink ? channelLink : "#"}
            target={isSubscriptionActive && channelLink ? "_blank" : "_self"}
            rel={isSubscriptionActive && channelLink ? "noopener noreferrer" : ""}
            className={styles.clubChannelCard}
            onClick={handleChatClick}
          >
            <div className={styles.clubChannelContent}>
              <Image
                src="/images/channel.webp"
                alt=""
                fill
                className={styles.clubChannelImage}
                sizes="(max-width: 768px) 100vw, 600px"
              />
              {/* –ü—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —Å—Ç–µ–∫–ª–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ */}
              {!isSubscriptionActive && (
                <div className={styles.channelGlassOverlay}>
                  {/* –ó–∞–º–æ–∫ –ø–æ–≤–µ—Ä—Ö —Å—Ç–µ–∫–ª–∞ */}
                  <div className={styles.channelLockContainer}>
                    <div className={`${styles.channelLockIcon} ${styles.pulsingLock}`}>
                      <Lock size={24} />
                    </div>
                  </div>
                </div>
              )}
            </div>
          </a>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫–æ–≤–∞—è –º–æ–¥–∞–ª–∫–∞ */}
      <SearchModal 
        isOpen={isSearchOpen} 
        onClose={() => setIsSearchOpen(false)} 
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ */}
      {showSubscriptionModal && (
        <div className={styles.modalOverlay} onClick={() => setShowSubscriptionModal(false)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <button 
              className={styles.closeButton}
              onClick={() => setShowSubscriptionModal(false)}
            >
              <X size={24} />
            </button>
            
            <div className={styles.modalBody}>
              <div className={styles.modalIcon}>
                <Lock size={48} />
              </div>
              
              <h3 className={styles.modalTitle}>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</h3>
              
              <p className={styles.modalText}>
                –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ —á–∞—Ç—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. 
                –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!
              </p>
              
              <a 
                href="https://t.me/istochnik_clubbot?start=closedclub"
                target="_blank"
                rel="noopener noreferrer"
                className={styles.modalButton}
              >
                –ü–û–õ–£–ß–ò–¢–¨ –î–û–°–¢–£–ü
              </a>
            </div>
          </div>
        </div>
      )}


    </Page>
  );
}
