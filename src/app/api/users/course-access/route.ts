import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

/**
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–∞–∑–¥–µ–ª–∞–º –∫—É—Ä—Å–æ–≤
 * GET /api/users/course-access?telegram_id=123456789
 */
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const telegramId = searchParams.get('telegram_id');

    if (!telegramId) {
      return NextResponse.json({ 
        error: 'Telegram ID is required' 
      }, { status: 400 });
    }

    console.log('üîç Getting course access for telegram_id:', telegramId);

    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫—É—Ä—Å–∞–º
    const { data: user, error } = await supabase
      .from('users')
      .select('telegram_id')
      .eq('telegram_id', parseInt(telegramId))
      .single();

    if (error) {
      console.error('‚ùå Error fetching user course access:', error);
      return NextResponse.json({ 
        error: 'Failed to fetch course access' 
      }, { status: 500 });
    }

    if (!user) {
      return NextResponse.json({ 
        error: 'User not found' 
      }, { status: 404 });
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
    const defaultAccess = {
      stomach: true,        // course_flat_belly
      swelling: false,      // course_anti_swelling
      blossom: false,       // course_bloom
      flexibility: false,   // useful
      face: false,          // workouts
      foot: false,          // guides
      bodyflow: false,      // motivation
      posture: false        // nutrition
    };

    const courseAccess = defaultAccess;

    console.log('‚úÖ Course access found:', {
      telegram_id: user.telegram_id,
      access: courseAccess
    });

    return NextResponse.json({
      success: true,
      telegram_id: user.telegram_id,
      course_access: courseAccess
    });

  } catch (error) {
    console.error('‚ùå Unexpected error in course-access API:', error);
    return NextResponse.json({ 
      error: 'Internal server error' 
    }, { status: 500 });
  }
}

/**
 * API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫—É—Ä—Å–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
 * PUT /api/users/course-access
 */
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const { telegram_id, course_access } = body;

    if (!telegram_id || !course_access) {
      return NextResponse.json({ 
        error: 'Telegram ID and course_access are required' 
      }, { status: 400 });
    }

    console.log('üîß Updating course access for telegram_id:', telegram_id);

    // TODO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –Ω–æ–≤–æ–π –ë–î
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { data: user, error } = await supabase
      .from('users')
      .select('telegram_id')
      .eq('telegram_id', parseInt(telegram_id))
      .single();

    if (error) {
      console.error('‚ùå Error updating course access:', error);
      return NextResponse.json({ 
        error: 'Failed to update course access' 
      }, { status: 500 });
    }

    if (!user) {
      return NextResponse.json({ 
        error: 'User not found' 
      }, { status: 404 });
    }

    console.log('‚úÖ Course access updated (mock):', {
      telegram_id: user.telegram_id,
      new_access: course_access
    });

    return NextResponse.json({
      success: true,
      telegram_id: user.telegram_id,
      course_access: course_access,
      message: 'Course access updated successfully (mock)'
    });

  } catch (error) {
    console.error('‚ùå Unexpected error updating course access:', error);
    return NextResponse.json({ 
      error: 'Internal server error' 
    }, { status: 500 });
  }
}