import { supabase } from '@/lib/supabase';
import { NextResponse } from 'next/server';
import { parseUtmParams } from '@/lib/utm';

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π UTM –º–µ—Ç–æ–∫ (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
 */
export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { 
      telegram_id, 
      name_from_ml, 
      username, 
      start_param,
      ...otherData 
    } = body;

    if (!telegram_id) {
      return NextResponse.json({ error: 'Telegram ID is required' }, { status: 400 });
    }

    console.log('üîç Auto-registration request for telegram_id:', telegram_id);

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('id, telegram_id, name_from_ml, utm_1, utm_2, utm_3, utm_4, utm_5')
      .eq('telegram_id', parseInt(telegram_id))
      .maybeSingle();

    if (checkError) {
      console.error('‚ùå Error checking user existence:', checkError);
      return NextResponse.json({ 
        error: 'Failed to check user existence' 
      }, { status: 500 });
    }

    if (existingUser) {
      // üö´ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –ù–ï –¢–†–û–ì–ê–ï–ú UTM –ú–ï–¢–ö–ò
      console.log('üë§ User already exists, preserving UTM params:', {
        telegram_id: existingUser.telegram_id,
        name: existingUser.name,
        existing_utm: {
          utm_1: existingUser.utm_1,
          utm_2: existingUser.utm_2,
          utm_3: existingUser.utm_3,
          utm_4: existingUser.utm_4,
          utm_5: existingUser.utm_5
        }
      });

      return NextResponse.json({
        success: true,
        isNewUser: false,
        user: existingUser,
        message: 'User already exists, UTM params preserved'
      });
    }

    // 2. –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - —Å–æ–∑–¥–∞–µ–º —Å UTM –º–µ—Ç–∫–∞–º–∏
    console.log('üÜï Creating new user with UTM params from start_param:', start_param);
    
    const utmParams = parseUtmParams(start_param || null);
    
    const newUserData = {
      telegram_id: parseInt(telegram_id),
      name_from_ml: name_from_ml || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username: username || null,
      status: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      testing: false,
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∞—Ö)
      salebot_id: null,
      mail: null,
      phone: null,
      clubtarif: null,
      next_payment_date: null,
      forma_opl: null,
      metka: 'auto_registered',
      periodtarif: null,
      srok: null,
      start_sub_club: null,
      subscr_id: null,
      sum: null,
      delete_club: false,
      first_monthdate: null,
      sub_club_stop: null,
      amo_lead_id: null,
      amo_client_id: null,
      istochnik: null,
      forma_oplaty: null,
      
      // UTM –º–µ—Ç–∫–∏ –∏–∑ start_param
      utm_1: utmParams.utm_1,
      utm_2: utmParams.utm_2,
      utm_3: utmParams.utm_3,
      utm_4: utmParams.utm_4,
      utm_5: utmParams.utm_5,
      
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã –∫ –∫—É—Ä—Å–∞–º (–ù–û–í–´–ï –ö–õ–Æ–ß–ò!)
      course_access: {
        stomach: true,        // course_flat_belly - –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç
        swelling: false,      // course_anti_swelling
        blossom: false,       // course_bloom  
        flexibility: false,   // useful (–†–µ–ª—å–µ—Ñ –∏ –≥–∏–±–∫–æ—Å—Ç—å)
        face: false,          // workouts (–î–ª—è –ª–∏—Ü–∞)
        foot: false,          // guides (–°—Ç–æ–ø—ã)
        bodyflow: false,      // motivation (BodyFlow)
        posture: false        // nutrition (–û—Å–∞–Ω–∫–∞)
      },
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
      ...otherData
    };

    const { data: newUser, error: createError } = await supabase
      .from('users')
      .insert([newUserData])
      .select()
      .single();

    if (createError) {
      console.error('‚ùå Error creating new user:', createError);
      return NextResponse.json({ 
        error: 'Failed to create user',
        details: createError.message 
      }, { status: 500 });
    }

    console.log('‚úÖ Successfully created new user:', {
      telegram_id: newUser.telegram_id,
      name: newUser.name,
      utm_params: {
        utm_1: newUser.utm_1,
        utm_2: newUser.utm_2,
        utm_3: newUser.utm_3,
        utm_4: newUser.utm_4,
        utm_5: newUser.utm_5
      }
    });

    return NextResponse.json({
      success: true,
      isNewUser: true,
      user: newUser,
      message: 'User created successfully with UTM params'
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå Unexpected error in auto-register:', error);
    return NextResponse.json({ 
      error: 'Internal server error' 
    }, { status: 500 });
  }
} 