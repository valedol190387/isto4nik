import { useState, useEffect } from 'react';
import { useSignal } from '@telegram-apps/sdk-react';
import { initData } from '@telegram-apps/sdk-react';
import { CourseAccess } from '@/types/database';

interface CourseAccessResult {
  access: CourseAccess | null;
  loading: boolean;
  error: string | null;
  refetch: () => void;
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ä–∞–∑–¥–µ–ª–∞–º –∫—É—Ä—Å–æ–≤
 */
export function useCourseAccess(): CourseAccessResult {
  const [access, setAccess] = useState<CourseAccess | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const user = useSignal(initData.user);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID
  const getTelegramId = (): string | null => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram SDK
    if (user?.id) {
      return user.id.toString();
    }

    // Fallback - –∏–∑ Telegram WebApp API
    if (typeof window !== 'undefined') {
      const tg = (window as any).Telegram?.WebApp;
      if (tg?.initDataUnsafe?.user?.id) {
        return tg.initDataUnsafe.user.id.toString();
      }
    }

    return null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const autoRegisterUser = async (telegramId: string) => {
    try {
      console.log('üÜï Auto-registering user:', telegramId);
      
      const response = await fetch('/api/users/auto-register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegram_id: telegramId,
          name: user?.first_name || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          tg_username: user?.username || null,
          start_param: null // UTM –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
        })
      });

      if (!response.ok) {
        throw new Error(`Auto-registration failed: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ User auto-registered:', result.isNewUser ? 'NEW' : 'EXISTING');
      return result;
    } catch (error) {
      console.error('‚ùå Auto-registration error:', error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–æ–≤
  const fetchAccess = async () => {
    try {
      setError(null);

      const telegramId = getTelegramId();
      if (!telegramId) {
        console.log('‚ö†Ô∏è No telegram ID found, using default access');
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã –µ—Å–ª–∏ –Ω–µ—Ç ID
        setAccess({
          stomach: true,        // course_flat_belly
          swelling: false,      // course_anti_swelling
          blossom: false,       // course_bloom
          flexibility: false,   // useful
          face: false,          // workouts
          foot: false,          // guides
          bodyflow: false,      // motivation
          posture: false        // nutrition
        });
        return;
      }

      console.log('üîç Fetching course access for telegram_id:', telegramId);

      const response = await fetch(`/api/users/course-access?telegram_id=${telegramId}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          console.log('üë§ User not found, creating automatically...');
          
          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          await autoRegisterUser(telegramId);
          
          // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã
          // (–æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ auto-register API)
          setAccess({
            stomach: true,        // course_flat_belly
            swelling: false,      // course_anti_swelling
            blossom: false,       // course_bloom
            flexibility: false,   // useful
            face: false,          // workouts
            foot: false,          // guides
            bodyflow: false,      // motivation
            posture: false        // nutrition
          });
          return;
        }
        throw new Error(`Failed to fetch course access: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success && data.course_access) {
        console.log('‚úÖ Course access loaded:', data.course_access);
        setAccess(data.course_access);
      } else {
        throw new Error('Invalid response format');
      }

    } catch (err) {
      console.error('‚ùå Error fetching course access:', err);
      setError(err instanceof Error ? err.message : 'Failed to load course access');
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–æ—Å—Ç—É–ø—ã
      setAccess({
        stomach: true,        // course_flat_belly
        swelling: false,      // course_anti_swelling
        blossom: false,       // course_bloom
        flexibility: false,   // useful
        face: false,          // workouts
        foot: false,          // guides
        bodyflow: false,      // motivation
        posture: false        // nutrition
      });
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    fetchAccess();
  }, [user?.id]);

  return {
    access,
    loading,
    error,
    refetch: fetchAccess
  };
}

// –§—É–Ω–∫—Ü–∏—è hasAccessToSection –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ src/utils/courseAccessMapping.ts