/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å UTM –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
 */

import { supabase } from './supabase';
import { parseUtmParams, formatUserName, type TelegramUserData, type UtmParams } from './utm';

export interface UserRegistrationResult {
  isNewUser: boolean;
  success: boolean;
  error?: string;
  userId?: string;
}

export interface NewUserData {
  telegram_id: string;
  name: string;
  tg_username: string | null;
  utm_1: string | null;
  utm_2: string | null;
  utm_3: string | null;
  utm_4: string | null;
  utm_5: string | null;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * TODO: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
async function sendNewUserWebhook(userData: NewUserData): Promise<void> {
  try {
    // –ü–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∑–∂–µ
    /*
    const webhookUrl = process.env.NEXT_PUBLIC_NEW_USER_WEBHOOK_URL;
    if (!webhookUrl) return;

    const payload = {
      ...userData,
      event_type: 'new_user_registration',
      timestamp: new Date().toISOString()
    };

    console.log('üì§ Sending webhook to:', webhookUrl);
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (response.ok) {
      console.log('‚úÖ Webhook sent successfully');
    } else {
      console.error('‚ùå Webhook failed with status:', response.status);
    }
    */
    
    console.log('üì§ Webhook –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ:', userData);
  } catch (error) {
    console.error('‚ùå Error sending webhook:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API endpoint
 * –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, —Ç–∞–∫ –∫–∞–∫ –≤—Å—è –ª–æ–≥–∏–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ API
 */
async function registerUserViaAPI(
  telegramUser: TelegramUserData,
  startParam: string | null
): Promise<{ success: boolean; isNewUser: boolean; error?: string }> {
  try {
    const response = await fetch('/api/users/auto-register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        telegram_id: telegramUser.id.toString(),
        name: formatUserName(telegramUser),
        tg_username: telegramUser.username || null,
        start_param: startParam
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      return { 
        success: false, 
        isNewUser: false, 
        error: errorData.error || 'API request failed' 
      };
    }

    const result = await response.json();
    return {
      success: result.success,
      isNewUser: result.isNewUser
    };

  } catch (error) {
    console.error('‚ùå Error calling auto-register API:', error);
    return { 
      success: false, 
      isNewUser: false, 
      error: 'Network error' 
    };
  }
}



/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
 * 
 * –í–ê–ñ–ù–û: UTM –º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!
 * –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π UTM –º–µ—Ç–∫–∏ –ù–ï –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è!
 */
export async function checkAndCreateUser(
  telegramUser: TelegramUserData,
  startParam?: string | null
): Promise<UserRegistrationResult> {
  const telegramId = telegramUser.id.toString();
  
  try {
    console.log('üîç Starting user auto-registration for telegram_id:', telegramId);
    console.log('üìä Start param received:', startParam);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º API endpoint –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
    const { success, isNewUser, error } = await registerUserViaAPI(
      telegramUser, 
      startParam || null
    );

    if (!success) {
      return { 
        isNewUser: false, 
        success: false, 
        error: error || 'Registration failed',
        userId: telegramId 
      };
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å UTM
    if (isNewUser && startParam) {
      const utmParams = parseUtmParams(startParam);
      await sendNewUserWebhook({
        telegram_id: telegramId,
        name: formatUserName(telegramUser),
        tg_username: telegramUser.username || null,
        utm_1: utmParams.utm_1,
        utm_2: utmParams.utm_2,
        utm_3: utmParams.utm_3,
        utm_4: utmParams.utm_4,
        utm_5: utmParams.utm_5
      });
    }

    console.log(`‚úÖ Auto-registration completed: ${isNewUser ? 'NEW' : 'EXISTING'} user`);
    return { 
      isNewUser, 
      success: true, 
      userId: telegramId 
    };

  } catch (error) {
    console.error('‚ùå Unexpected error in checkAndCreateUser:', error);
    return { 
      isNewUser: false, 
      success: false, 
      error: 'Unexpected registration error',
      userId: telegramId 
    };
  }
} 