'use client';

import { useEffect } from 'react';
import type React from 'react';
import {
  initData,
  miniApp,
  viewport,
  viewportContentSafeAreaInsetTop,
  viewportContentSafeAreaInsetBottom,
  viewportContentSafeAreaInsetLeft,
  viewportContentSafeAreaInsetRight,
  viewportSafeAreaInsetTop,
  viewportSafeAreaInsetBottom,
  viewportSafeAreaInsetLeft,
  viewportSafeAreaInsetRight,
  useLaunchParams,
  useSignal,
} from '@telegram-apps/sdk-react';
import { TonConnectUIProvider } from '@tonconnect/ui-react';
import { AppRoot } from '@telegram-apps/telegram-ui';

import { ErrorBoundary } from '@/components/ErrorBoundary';
import { ErrorPage } from '@/components/ErrorPage';
import { useDidMount } from '@/hooks/useDidMount';
import { setLocale } from '@/core/i18n/locale';
import TelegramStickyApp from '@/components/TelegramStickyApp';
import { checkAndCreateUser } from '@/lib/userRegistration';
import { extractTelegramData, isValidTelegramUser } from '@/lib/utm';

import './styles.css';

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
function isMobilePlatform() {
  if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp) {
    const platform = (window as any).Telegram.WebApp.platform;
    return platform === 'ios' || platform === 'android' || platform === 'mobile_web';
  }
  
  // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ user agent
  if (typeof navigator !== 'undefined') {
    const userAgent = navigator.userAgent.toLowerCase();
    return /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
  }
  
  return false;
}

function RootInner({ children }: { children: any }) {
  const lp = useLaunchParams();
  const isDark = useSignal(miniApp.isDark);
  const initDataUser = useSignal(initData.user);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const locale = initDataUser?.language_code === 'ru' ? 'ru' : 'en';
    setLocale(locale);
  }, [initDataUser]);

  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã Safe Area
  const safeAreaTop = useSignal(viewportSafeAreaInsetTop);
  const safeAreaBottom = useSignal(viewportSafeAreaInsetBottom);
  const safeAreaLeft = useSignal(viewportSafeAreaInsetLeft);
  const safeAreaRight = useSignal(viewportSafeAreaInsetRight);

  const contentSafeAreaTop = useSignal(viewportContentSafeAreaInsetTop);
  const contentSafeAreaBottom = useSignal(viewportContentSafeAreaInsetBottom);
  const contentSafeAreaLeft = useSignal(viewportContentSafeAreaInsetLeft);
  const contentSafeAreaRight = useSignal(viewportContentSafeAreaInsetRight);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π TMA
  useEffect(() => {
    const initTelegramFeatures = async () => {
      try {
        const setupFullscreen = () => {
          try {
            if (viewport && !viewport.state().isExpanded) {
              viewport.expand();
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ viewport:', error);
          }
        };

        // –ó–∞–ø—É—Å–∫–∞–µ–º fullscreen —Å—Ä–∞–∑—É
        setupFullscreen();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp) {
          (window as any).Telegram.WebApp.ready();
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TMA features:', error);
      }
    };

    initTelegramFeatures();
  }, []);

  // UTM tracking –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    const handleUserRegistration = async () => {
      try {
        console.log('üöÄ Checking for user auto-registration...');
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram SDK
        if (initDataUser && isValidTelegramUser(initDataUser)) {
          console.log('‚úÖ Got user from Telegram SDK:', initDataUser.id);
          
          // –ü–æ–ª—É—á–∞–µ–º start_param –¥–ª—è UTM –º–µ—Ç–æ–∫
          const startParam = lp.tgWebAppStartParam || null;
          console.log('üè∑Ô∏è Start param:', startParam);
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await checkAndCreateUser(initDataUser, startParam);
          return;
        }

        // Fallback: –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp –Ω–∞–ø—Ä—è–º—É—é
        const { user, startParam } = extractTelegramData();
        if (isValidTelegramUser(user)) {
          console.log('‚úÖ Got user from WebApp fallback:', user.id);
          await checkAndCreateUser(user, startParam);
          return;
        }

        console.log('‚ÑπÔ∏è No valid user data found for auto-registration');
      } catch (error) {
        console.error('‚ùå Error during user auto-registration:', error);
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã Telegram —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    const timer = setTimeout(handleUserRegistration, 1000);
    return () => clearTimeout(timer);
  }, [initDataUser, lp.tgWebAppStartParam]);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Safe Area –æ—Ç—Å—Ç—É–ø—ã: –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ safe area + content safe area –æ—Ç Telegram
  useEffect(() => {
    const root = document.documentElement;
    
    const topTotal = (safeAreaTop || 0) + (contentSafeAreaTop || 0);
    const bottomTotal = (safeAreaBottom || 0) + (contentSafeAreaBottom || 0);
    const leftTotal = (safeAreaLeft || 0) + (contentSafeAreaLeft || 0);
    const rightTotal = (safeAreaRight || 0) + (contentSafeAreaRight || 0);
    
    root.style.setProperty('--safe-area-inset-top', `${topTotal}px`);
    root.style.setProperty('--safe-area-inset-bottom', `${bottomTotal}px`);
    root.style.setProperty('--safe-area-inset-left', `${leftTotal}px`);
    root.style.setProperty('--safe-area-inset-right', `${rightTotal}px`);
  }, [safeAreaTop, safeAreaBottom, safeAreaLeft, safeAreaRight, contentSafeAreaTop, contentSafeAreaBottom, contentSafeAreaLeft, contentSafeAreaRight]);

  return (
    <TonConnectUIProvider manifestUrl="/tonconnect-manifest.json">
      <TelegramStickyApp>
        <AppRoot
          appearance={isDark ? 'dark' : 'light'}
          platform={
            ['macos', 'ios'].includes(lp.tgWebAppPlatform) ? 'ios' : 'base'
          }
        >
          {children}
        </AppRoot>
      </TelegramStickyApp>
    </TonConnectUIProvider>
  );
}

export function RootWithTelegram({ children }: { children: React.ReactNode }) {
  const didMount = useDidMount();

  return didMount ? (
    <ErrorBoundary fallback={ErrorPage}>
      <RootInner>{children}</RootInner>
    </ErrorBoundary>
  ) : (
    <div className="root__loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  );
} 