'use client';

import { useEffect, useState } from 'react';
import { usePathname } from 'next/navigation';
import { checkAndCreateUser } from '@/lib/userRegistration';
import { extractTelegramData, isValidTelegramUser } from '@/lib/utm';

interface UserAutoRegistrationProps {
  children: React.ReactNode;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ Telegram Mini App
 * 
 * –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
 * - –ê–¥–º–∏–Ω—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (/admin/*) –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è
 * - localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export default function UserAutoRegistration({ children }: UserAutoRegistrationProps) {
  const [telegramId, setTelegramId] = useState<string | null>(null);
  const [isChecking, setIsChecking] = useState(true);
  const [loadingMessage, setLoadingMessage] = useState('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...');
  const pathname = usePathname();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π
  const isAdminPage = pathname && pathname.startsWith('/admin');

  useEffect(() => {
    const initializeUser = async () => {
      try {
        console.log('üöÄ Initializing user auto-registration...');
        
        // üîì –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –î–õ–Ø –ê–î–ú–ò–ù–ö–ò: –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Telegram
        if (isAdminPage) {
          console.log('üîì Admin page detected - skipping Telegram check');
          setTelegramId('admin');
          setIsChecking(false);
          return;
        }
        
        // üõ†Ô∏è –†–ê–ó–†–ê–ë–û–¢–ö–ê: localhost —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
          const urlParams = new URLSearchParams(window.location.search);
          const testTelegramId = urlParams.get('telegram_id');
          const testStartParam = urlParams.get('start_param');
          
          if (testTelegramId && /^\d+$/.test(testTelegramId)) {
            console.log('üõ†Ô∏è localhost: Using telegram_id from URL:', testTelegramId);
            setTelegramId(testTelegramId);
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ URL
            const testUser = {
              id: parseInt(testTelegramId),
              first_name: `–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`,
              last_name: `ID: ${testTelegramId}`,
              username: `test_user_${testTelegramId}`
            };
            
            await checkAndCreateUser(testUser, testStartParam || undefined);
          } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            console.log('üõ†Ô∏è localhost: Using default test user (123456789)');
            setTelegramId('123456789');
            
            const defaultUser = {
              id: 123456789,
              first_name: 'Test',
              last_name: 'User', 
              username: 'test_user'
            };
            
            await checkAndCreateUser(defaultUser, testStartParam || undefined);
          }
          setIsChecking(false);
          return;
        }
        
        // üéØ PRODUCTION: –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram WebApp
        let attempts = 0;
        const maxAttempts = 20; // –ú–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è (20 * 100ms)
        
        const checkTelegramWebApp = async (): Promise<boolean> => {
          attempts++;
          console.log(`üîÑ Attempt ${attempts}/${maxAttempts}: Checking Telegram WebApp...`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp
          if (!(window as any).Telegram?.WebApp) {
            console.log(`‚ùå Attempt ${attempts}: No Telegram WebApp object detected`);
            return false;
          }
          
          const tg = (window as any).Telegram.WebApp;
          
          // –í—ã–∑—ã–≤–∞–µ–º ready() –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ
          if (attempts === 1) {
            console.log('üì± Calling Telegram.WebApp.ready()');
            tg.ready();
            tg.expand(); // –¢–∞–∫–∂–µ —Ä–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          }
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { user, startParam } = extractTelegramData();
          
          console.log(`üìä Attempt ${attempts} WebApp data:`, { 
            version: (tg as any).version,
            platform: (tg as any).platform,
            user: user ? { id: user.id, first_name: user.first_name } : null,
            startParam,
            hasInitData: !!tg.initData
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (isValidTelegramUser(user)) {
            console.log('‚úÖ SUCCESS: Got valid telegram_id from Telegram WebApp:', user.id);
            setTelegramId(user.id.toString());
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await checkAndCreateUser(user, startParam);
            return true;
          } else {
            console.log(`‚è≥ Attempt ${attempts}: WebApp ready but user data not available yet`);
            return false;
          }
        };
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 100ms
        const attemptWithRetry = async () => {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
          if (attempts <= 5) {
            setLoadingMessage('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...');
          } else if (attempts <= 10) {
            setLoadingMessage('–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
          } else {
            setLoadingMessage('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
          }
          
          const success = await checkTelegramWebApp();
          
          if (success) {
            setLoadingMessage('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!');
            setTimeout(() => setIsChecking(false), 300); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—Å–ø–µ—Ö–∞
            return;
          }
          
          if (attempts < maxAttempts) {
            setTimeout(attemptWithRetry, 100);
          } else {
            console.log('‚ùå production: Max attempts reached - no valid Telegram user found');
            setTelegramId(null);
            setIsChecking(false);
          }
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(attemptWithRetry, 50);
        
      } catch (error) {
        console.error('‚ùå Error during user initialization:', error);
        setTelegramId(null);
        setIsChecking(false);
      }
    };

    initializeUser();
  }, [isAdminPage]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (isChecking) {
    return (
      <div className="min-h-screen flex items-center justify-center" style={{ 
        background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
        fontFamily: 'var(--font-montserrat)'
      }}>
        <div className="text-center max-w-md px-4">
          <div className="w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-6"></div>
          <h3 className="text-lg font-medium text-gray-800 mb-2">Ayuna Beauty</h3>
          <p className="text-gray-600 text-sm mb-4">{loadingMessage}</p>
          <div className="text-xs text-gray-500">
            –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...
          </div>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id - –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
  if (!telegramId) {
    return (
      <div className="min-h-screen flex items-center justify-center p-6" style={{ 
        background: 'linear-gradient(135deg, #fef3c7 0%, #fbbf24 100%)',
        fontFamily: 'var(--font-montserrat)'
      }}>
        <div className="text-center max-w-md">
          <div className="w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0C5.374 0 0 5.373 0 12s5.374 12 12 12 12-5.373 12-12S18.626 0 12 0zm5.568 8.16c-.169 1.858-.896 6.728-.896 6.728-.377 2.655-.377 2.655-1.377 2.655-.896 0-1.615-.896-2.487-1.616l-3.677-2.512c-.896-.616-1.536-1.232-.64-2.128l4.573-4.573c.896-.896.448-1.344-.448-.448l-5.697 3.677c-1.232.774-1.232.774-2.128.448l-1.536-.448c-.896-.224-.896-1.344.896-2.016l11.2-4.125c.896-.336 1.792.224 1.472 2.24z"/>
            </svg>
          </div>
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
          </h2>
          <p className="text-gray-600 mb-6">
            –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –≤ Telegram. 
            –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞.
          </p>
          <div className="rounded-lg p-4 border border-gray-200 bg-white/50">
            <p className="text-sm text-gray-500">
              Ayuna Beauty —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–∫ Telegram Mini App
            </p>
          </div>
        </div>
      </div>
    );
  }

  // ‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω - —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  console.log('‚úÖ User auto-registration completed, access granted for telegram_id:', telegramId);
  return <>{children}</>;
} 